## Copyright (C) 2008-2013 Dominik Dahlem <Dominik.Dahlem@gmail.com>
##
## This file is free software; as a special exception the author gives
## unlimited permission to copy and/or distribute it, with or without
## modifications, as long as this notice is preserved.
##
## This program is distributed in the hope that it will be useful, but
## WITHOUT ANY WARRANTY, to the extent permitted by law; without even the
## implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

## Author: Dominik Dahlem <Dominik.Dahlem@gmail.com>
## Maintainer: Dominik Dahlem <Dominik.Dahlem@gmail.com>
## Keywords: Canonical Analysis
## Created: 10.11.2008
## Version: @VERSION@

function ca_serialiseRidge(prefix, B, b0, b, f, lambdas, increment, start=-1000000, dist, thresh=0.01, caminx, camaxx, minX, maxX, scale=1)
  outfile = [prefix "-ridge_path-" int2str(scale) ".dat"];
  fd = fopen(outfile, "wt");
  ## calculate the ridge path
  fprintf(stdout, "analyse minimum path\n");
  fflush(stdout);
  [xP, RP, yP, incr] = ca_analyseRidgeFocalIntermediate(B, b0, b, f, start:increment:floor(lambdas(1) - increment), dist);

  ## serialise the ridge path
  for r = 1:rows(incr)
    if (scale == 1)
      des = backscale_design(xP(r,:), caminx', camaxx');
    elseif (scale == 2)
      des = scale_design(backscale_design(xP(r,:), caminx', camaxx'), minX', maxX');
    else
      des = xP(r,:);
    endif


    fprintf(fd, "%.10f,%.10f,%.10f,", incr(r), RP(r), yP(r));
    for j = 1:(rows(caminx')-1)
      fprintf(fd, "%.10f,", des(j));
    endfor
    fprintf(fd, "%.10f,0\n", des(rows(caminx')));
  endfor

  for i = 1:(rows(lambdas) - 1)
    ## calculate the ridge path
    fprintf(stdout, "analyse %d centre paths\n", i);
    fflush(stdout);
    [xP, RP, yP, incr] = ca_analyseRidgeFocalIntermediate(B, b0, b, f, floor(lambdas(i) + increment):increment:floor(lambdas(i+1) - increment), dist);

    ## serialise the ridge path
    for r = 1:rows(incr)
      if (scale == 1)
        des = backscale_design(xP(r,:), caminx', camaxx');
      elseif (scale == 2)
        des = scale_design(backscale_design(xP(r,:), caminx', camaxx'), minX', maxX');
      else
        des = xP(r,:);
      endif

      fprintf(fd, "%.10f,%.10f,%.10f,", incr(r), RP(r), yP(r));
      for j = 1:(rows(caminx')-1)
        fprintf(fd, "%.10f,", des(j));
      endfor
      fprintf(fd, "%.10f,%d\n", des(rows(caminx')), i);
    endfor
  endfor

  ## calculate the 2q ridge path
  fprintf(stdout, "analyse maximum paths\n");
  fflush(stdout);
  [xP, RP, yP, incr] = ca_analyseRidgeFocal(B, b0, b, f, lambdas(rows(lambdas)), increment, dist, thresh);

  ## serialise the 2q ridge path
  for r = 1:rows(incr)
    if (scale == 1)
      des = backscale_design(xP(r,:), caminx', camaxx');
    elseif (scale == 2)
      des = scale_design(backscale_design(xP(r,:), caminx', camaxx'), minX', maxX');
    else
      des = xP(r,:);
    endif


    fprintf(fd, "%.10f,%.10f,%.10f,", incr(r), RP(r), yP(r));
    for j = 1:(rows(caminx')-1)
      fprintf(fd, "%.10f,", des(j));
    endfor
    fprintf(fd, "%.10f,%d\n", des(rows(caminx')), rows(lambdas));
  endfor
  fclose(fd);
endfunction
